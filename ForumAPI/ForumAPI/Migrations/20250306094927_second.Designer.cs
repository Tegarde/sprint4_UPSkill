// <auto-generated />
using System;
using ForumAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ForumAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250306094927_second")]
    partial class second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ForumAPI.Models.Attendance", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("EventId", "User");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("ForumAPI.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ForumAPI.Models.CommentLike", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CommentId", "User");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("ForumAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ForumAPI.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Interactions")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ForumAPI.Models.PostDislike", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PostId", "User");

                    b.ToTable("PostDislikes");
                });

            modelBuilder.Entity("ForumAPI.Models.PostFavorite", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PostId", "User");

                    b.ToTable("PostFavorites");
                });

            modelBuilder.Entity("ForumAPI.Models.PostLike", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PostId", "User");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("ForumAPI.Models.Attendance", b =>
                {
                    b.HasOne("ForumAPI.Models.Event", "Event")
                        .WithMany("Attendance")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ForumAPI.Models.Comment", b =>
                {
                    b.HasOne("ForumAPI.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("ForumAPI.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("ForumAPI.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Event");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ForumAPI.Models.CommentLike", b =>
                {
                    b.HasOne("ForumAPI.Models.Comment", "Comment")
                        .WithMany("LikedBy")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("ForumAPI.Models.PostDislike", b =>
                {
                    b.HasOne("ForumAPI.Models.Post", "Post")
                        .WithMany("DislikedBy")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ForumAPI.Models.PostFavorite", b =>
                {
                    b.HasOne("ForumAPI.Models.Post", "Post")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ForumAPI.Models.PostLike", b =>
                {
                    b.HasOne("ForumAPI.Models.Post", "Post")
                        .WithMany("LikedBy")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ForumAPI.Models.Comment", b =>
                {
                    b.Navigation("LikedBy");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ForumAPI.Models.Event", b =>
                {
                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("ForumAPI.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DislikedBy");

                    b.Navigation("FavoritedBy");

                    b.Navigation("LikedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
